
const { sendEmail } = require('../services/email.service');
const { Variables } = require("camunda-external-task-client-js");
const {updateApplicationStatus} = require("../services/postgres.service");

function registerEmailNotificationWorker(client, sesClient) {
    client.subscribe("emailNotification", async ({ task, taskService }) => {
        const type = task.variables.get("type");
        console.log(`üìß Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [emailNotification] lo·∫°i: "${type}"`);
        let newStatus = null;

        try {
            const customerData = task.variables.get("customerData") || {};
            let recipientEmail = customerData.email || 'default-customer@example.com';
            const fromAddress = process.env.AWS_SES_FROM_ADDRESS;

            let subject = '';
            let body = '';

            switch (type) {
                case 'offer':
                    const product = task.variables.get("recommendedProduct") || {};
                    subject = 'Ch√∫c m·ª´ng! ƒê·ªÅ ngh·ªã vay v·ªën c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát';
                    body = `
                        <p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p>
                        <p>Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát v·ªõi s·ªë ti·ªÅn ${customerData.loan_amount}</strong>.</p>
                        <p>ƒê·ªÉ x√°c nh·∫≠n v√† ti·∫øp t·ª•c, vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi:</p>
                        <a href="http://localhost:3000/accept-offer?applicationId=${customerData.application_id}" 
                           style="background-color: #4CAF50; color: white; padding: 15px 25px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px;">
                           ƒê·ªìng √Ω v·ªõi ƒê·ªÅ ngh·ªã
                        </a>`;
                    break;

                case 'rejection':
                    newStatus = 'REJECTED';
                    subject = 'Th√¥ng b√°o v·ªÅ ƒë∆°n vay c·ªßa b·∫°n';
                    body = `<p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p><p>Sau khi xem x√©t, ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng ƒë∆°n vay c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát l·∫ßn n√†y.</p>`;
                    break;

                case 'confirmation':
                    newStatus = 'COMPLETED';
                    subject = 'X√°c nh·∫≠n kho·∫£n vay th√†nh c√¥ng';
                    body = `<p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p><p>Kho·∫£n vay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gi·∫£i ng√¢n th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>`;
                    break;

                case 'reminder':
                    subject = 'Nh·∫Øc nh·ªü: Vui l√≤ng ph·∫£n h·ªìi ƒë·ªÅ ngh·ªã vay v·ªën';
                    body = `<p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p><p>Ch√∫ng t√¥i th·∫•y b·∫°n ch∆∞a ph·∫£n h·ªìi v·ªÅ ƒë·ªÅ ngh·ªã vay v·ªën ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥. ƒê·ªÅ ngh·ªã s·∫Ω s·ªõm h·∫øt h·∫°n.</p>`;
                    break;

                case 'managerInsights':
                    const insights = task.variables.get("insights") || "Kh√¥ng c√≥ ph√¢n t√≠ch chi ti·∫øt.";
                    recipientEmail = process.env.MANAGER_EMAIL;
                    subject = `[C·∫ßn xem x√©t] ƒê∆°n vay c·ªßa kh√°ch h√†ng ${customerData.full_name || 'ch∆∞a r√µ'}`;
                    body = `<p>M·ªôt ƒë∆°n vay c·∫ßn ƒë∆∞·ª£c xem x√©t th·ªß c√¥ng.</p><p><strong>Ph√¢n t√≠ch t·ª´ LLM:</strong></p><p>"${insights}"</p>`;
                    break;

                default:
                    console.warn(`Lo·∫°i email kh√¥ng x√°c ƒë·ªãnh: "${type}". T√°c v·ª• s·∫Ω ƒë∆∞·ª£c ho√†n th√†nh m√† kh√¥ng g·ª≠i email.`);
                    return taskService.complete(task);
            }

            await sendEmail(recipientEmail, subject, body);
            if (newStatus && customerData.application_id) {
                await updateApplicationStatus(customerData.application_id, newStatus);
            }
            console.log(`üëç Ho√†n th√†nh t√°c v·ª• g·ª≠i email lo·∫°i "${type}" ƒë·∫øn ${recipientEmail}.`);
            await taskService.complete(task);

        } catch (error) {
            console.error(`‚ùå L·ªói trong worker g·ª≠i email:`, error.message);
            await taskService.handleFailure(task, {
                errorMessage: "Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o.",
                errorDetails: error.stack,
            });
        }
    });
}

module.exports = registerEmailNotificationWorker;