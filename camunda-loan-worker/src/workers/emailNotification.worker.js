const { sendEmail } = require('../services/email.service');
const { Variables } = require("camunda-external-task-client-js");
const { updateApplicationStatus } = require("../services/postgres.service");

function formatCurrencyVND(value) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND',
        maximumFractionDigits: 0
    }).format(value);
}

function registerEmailNotificationWorker(client, sesClient) {
    client.subscribe("emailNotification", async ({ task, taskService }) => {
        const type = task.variables.get("type");
        const insights = task.variables.get("insights");
        console.log(`üìß Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [emailNotification] lo·∫°i: "${type}"`);

        let newStatus = null;

        try {
            const customerData = task.variables.get("customerData") || {};
            let recipientEmail = customerData.email || 'default-customer@example.com';
            const fromAddress = process.env.AWS_SES_FROM_ADDRESS;

            let subject = '';
            let bodyContent = '';

            const emailTemplate = (content) => `
        <html>
          <head>
            <style>
              body {
                background-color: #f4f4f4;
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
              }
              .container {
                background-color: #ffffff;
                margin: 30px auto;
                padding: 30px;
                border-radius: 8px;
                max-width: 600px;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
              }
              .button {
                background-color: #4CAF50;
                color: white;
                padding: 14px 24px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                border-radius: 4px;
              }
              .footer {
                margin-top: 30px;
                font-size: 12px;
                color: #888888;
              }
            </style>
          </head>
          <body>
            <div class="container">
              ${content}
              <div class="footer">
                <p>Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y. N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, h√£y li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ kh√°ch h√†ng.</p>
              </div>
            </div>
          </body>
        </html>
      `;

            switch (type) {
                case 'offer':
                    const product = task.variables.get("recommendedProduct") || {};

                    const rawLoanAmount = Number(customerData.loan_amount || 0);
                    const finalLoanAmount = rawLoanAmount < 100000 ? rawLoanAmount * 26 : rawLoanAmount;
                    const formattedLoanAmount = formatCurrencyVND(finalLoanAmount);

                    subject = 'üéâ Ch√∫c m·ª´ng! ƒê·ªÅ ngh·ªã vay v·ªën c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát';
                    bodyContent = `
            <p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p>
            <p>Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát kho·∫£n vay v·ªõi s·ªë ti·ªÅn <strong>${formattedLoanAmount}</strong>.</p>
            <p>ƒê·ªÉ x√°c nh·∫≠n v√† ti·∫øp t·ª•c, vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi:</p>
            <p>
              <a href="http://localhost:3000/accept-offer?applicationId=${customerData.application_id}" class="button">
                ƒê·ªìng √Ω v·ªõi ƒê·ªÅ ngh·ªã
              </a>
            </p>
          `;
                    break;

                case 'rejection':
                    newStatus = 'REJECTED';
                    subject = 'üíº Th√¥ng b√°o: ƒê∆°n vay c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát';
                    bodyContent = `
            <p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p>
            <p>Sau khi xem x√©t, ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng ƒë∆°n vay c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát l·∫ßn n√†y.</p>
            <p>R·∫•t mong s·∫Ω ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n trong nh·ªØng c∆° h·ªôi ti·∫øp theo.</p>
          `;
                    break;

                case 'confirmation':
                    newStatus = 'COMPLETED';
                    subject = '‚úÖ Kho·∫£n vay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gi·∫£i ng√¢n th√†nh c√¥ng';
                    bodyContent = `
            <p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p>
            <p>Ch√∫ng t√¥i x√°c nh·∫≠n r·∫±ng kho·∫£n vay c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gi·∫£i ng√¢n th√†nh c√¥ng.</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
          `;
                    break;

                case 'reminder':
                    subject = 'üîî Nh·∫Øc nh·ªü: Vui l√≤ng ph·∫£n h·ªìi ƒë·ªÅ ngh·ªã vay v·ªën';
                    bodyContent = `
            <p>Ch√†o ${customerData.full_name || 'qu√Ω kh√°ch'},</p>
            <p>Ch√∫ng t√¥i th·∫•y b·∫°n ch∆∞a ph·∫£n h·ªìi v·ªÅ ƒë·ªÅ ngh·ªã vay v·ªën tr∆∞·ªõc ƒë√≥. ƒê·ªÅ ngh·ªã s·∫Ω s·ªõm h·∫øt h·∫°n, vui l√≤ng ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.</p>
          `;
                    break;

                case 'managerInsights':
                    const insights = task.variables.get("insights") || "Kh√¥ng c√≥ ph√¢n t√≠ch chi ti·∫øt.";
                    recipientEmail = process.env.MANAGER_EMAIL || 'minhsadz@gmail.com';
                    subject = `[C·∫ßn xem x√©t] ƒê∆°n vay c·ªßa kh√°ch h√†ng ${customerData.full_name || 'ch∆∞a r√µ'} v·ªõi th√¥ng tin t·ª´ LLM ph·∫£n h·ªìi ${insights}`;
                    bodyContent = `
            <p>M·ªôt ƒë∆°n vay c·∫ßn ƒë∆∞·ª£c xem x√©t th·ªß c√¥ng b·ªüi qu·∫£n l√Ω.</p>
            <p><strong>Ph√¢n t√≠ch t·ª´ h·ªá th·ªëng:</strong></p>
            <blockquote>${insights}</blockquote>
          `;
                    break;

                default:
                    console.warn(`Lo·∫°i email kh√¥ng x√°c ƒë·ªãnh: "${type}". T√°c v·ª• s·∫Ω ƒë∆∞·ª£c ho√†n th√†nh m√† kh√¥ng g·ª≠i email.`);
                    return taskService.complete(task);
            }

            const body = emailTemplate(bodyContent);

            await sendEmail(recipientEmail, subject, body);

            if (newStatus && customerData.application_id) {
                await updateApplicationStatus(customerData.application_id, newStatus);
            }

            console.log(`üëç Ho√†n th√†nh t√°c v·ª• g·ª≠i email lo·∫°i "${type}" ƒë·∫øn ${recipientEmail}.`);
            await taskService.complete(task);

        } catch (error) {
            console.error(`‚ùå L·ªói trong worker g·ª≠i email:`, error.message);
            await taskService.handleFailure(task, {
                errorMessage: "Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o.",
                errorDetails: error.stack,
            });
        }
    });
}

module.exports = registerEmailNotificationWorker;
