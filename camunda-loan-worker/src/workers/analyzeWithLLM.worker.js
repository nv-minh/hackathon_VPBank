const axios = require('axios');
const { Variables } = require("camunda-external-task-client-js");

function registerAnalyzeLLMWorker(client, redisClient) {
    client.subscribe("analyzeWithLLM", async ({ task, taskService }) => {
        console.log("üß† Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [analyzeWithLLM]...");

        try {
            const customerData = task.variables.get("customerData");
            if (!customerData) {
                throw new Error("Kh√¥ng t√¨m th·∫•y 'customerData' ƒë·ªÉ g·ª≠i cho LLM.");
            }

            const cacheKey = `llm_analysis:${customerData.application_id}`;
            console.log(`...ki·ªÉm tra cache v·ªõi key: ${cacheKey}`);

            const cachedAnalysis = await redisClient.get(cacheKey);

            if (cachedAnalysis) {
                console.log("‚úÖ Cache HIT. S·ª≠ d·ª•ng k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ Redis.");
                const insights = JSON.parse(cachedAnalysis);

                const processVariables = new Variables();
                processVariables.set("insights", insights);
                return await taskService.complete(task, processVariables);
            }

            console.log("... Cache MISS. G·ªçi ƒë·∫øn service LLM.");
            // const bedrockServiceUrl = 'https://your-aws-bedrock-service.com/analyze-reason';
            // const response = await axios.post(bedrockServiceUrl, customerData);
            // const analysisResult = response.data;
            // const insights = analysisResult.analysis_text;
            const insights = "c≈©ng ƒë∆∞·ª£c ƒë·∫•y h√£y c√¢n nh·∫Øc";

            if (!insights) {
                throw new Error("D·ªØ li·ªáu t·ª´ LLM kh√¥ng c√≥ n·ªôi dung ph√¢n t√≠ch.");
            }

            await redisClient.set(cacheKey, JSON.stringify(insights), { EX: 3600 });
            console.log(`...ƒë√£ l∆∞u ph√¢n t√≠ch v√†o cache.`);

            console.log("‚úÖ LLM ƒë√£ tr·∫£ v·ªÅ ph√¢n t√≠ch th√†nh c√¥ng.");
            const processVariables = new Variables();
            processVariables.set("insights", insights);
            await taskService.complete(task, processVariables);

        } catch (error) {
            console.error("‚ùå L·ªói trong worker [analyzeWithLLM]:", error.message);
            await taskService.handleFailure(task, {
                errorMessage: error.message,
                errorDetails: error.stack
            });
        }
    });
}

module.exports = registerAnalyzeLLMWorker;