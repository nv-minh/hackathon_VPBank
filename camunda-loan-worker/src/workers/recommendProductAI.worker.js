client.subscribe("recommendProduct", async ({ task, taskService }) => {
    console.log(`üí° Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [recommendProduct] ƒë·ªÉ g·ªçi AI...`);

    const customerData = task.variables.get("customerData");

    if (!customerData) {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y 'customerData' ƒë·ªÉ g·ª≠i cho AI g·ª£i √Ω s·∫£n ph·∫©m.");
        return await taskService.handleFailure(task, {
            errorMessage: "Thi·∫øu customerData ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m."
        });
    }

    try {
        const recommendServiceUrl = 'http://your-ai-service.com/recommend-product';

        console.log(`...g·ª≠i y√™u c·∫ßu ƒë·∫øn service g·ª£i √Ω s·∫£n ph·∫©m: ${recommendServiceUrl}`);

        const response = await axios.post(recommendServiceUrl, customerData);
        const recommendedProduct = response.data;

        console.log("‚úÖ AI ƒë√£ g·ª£i √Ω s·∫£n ph·∫©m:", recommendedProduct);

        const processVariables = new Map();
        processVariables.set("recommendedProduct", recommendedProduct);

        await taskService.complete(task, processVariables);

    } catch (error) {
        console.error("‚ùå L·ªói khi g·ªçi service AI g·ª£i √Ω s·∫£n ph·∫©m:", error.message);
        await taskService.handleFailure(task, {
            errorMessage: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ho·∫∑c c√≥ l·ªói t·ª´ service AI g·ª£i √Ω s·∫£n ph·∫©m.",
            errorDetails: error.stack
        });
    }
});