const axios = require('axios');
const { Variables } = require("camunda-external-task-client-js");

function registerRecommendProductWorker(client, redisClient) {
    client.subscribe("recommendProduct", async ({ task, taskService }) => {
        console.log(`üí° Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [recommendProduct]...`);

        try {
            const customerData = task.variables.get("customerData");
            if (!customerData) {
                throw new Error("Kh√¥ng t√¨m th·∫•y 'customerData' ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m.");
            }

            const cacheKey = `recommendation:${customerData.application_id}`;
            console.log(`...ki·ªÉm tra cache v·ªõi key: ${cacheKey}`);

            const cachedRecommendation = await redisClient.get(cacheKey);

            if (cachedRecommendation) {
                console.log("‚úÖ Cache HIT. S·ª≠ d·ª•ng g·ª£i √Ω s·∫£n ph·∫©m t·ª´ Redis.");
                const recommendedProduct = JSON.parse(cachedRecommendation);

                const processVariables = new Variables();
                processVariables.set("recommendedProduct", recommendedProduct);
                return await taskService.complete(task, processVariables);
            }

            console.log("... Cache MISS. G·ªçi ƒë·∫øn service g·ª£i √Ω s·∫£n ph·∫©m.");
            const recommendServiceUrl = 'http://your-ai-service.com/recommend-product';
            const response = await axios.post(recommendServiceUrl, customerData);
            const recommendedProduct = response.data;

            await redisClient.set(cacheKey, JSON.stringify(recommendedProduct), { EX: 3600 });
            console.log(`...ƒë√£ l∆∞u g·ª£i √Ω v√†o cache.`);

            console.log("‚úÖ AI ƒë√£ g·ª£i √Ω s·∫£n ph·∫©m:", recommendedProduct);
            const processVariables = new Variables();
            processVariables.set("recommendedProduct", recommendedProduct);
            await taskService.complete(task, processVariables);

        } catch (error) {
            console.error("‚ùå L·ªói trong worker [recommendProduct]:", error.message);
            await taskService.handleFailure(task, {
                errorMessage: error.message,
                errorDetails: error.stack
            });
        }
    });
}

module.exports = registerRecommendProductWorker;