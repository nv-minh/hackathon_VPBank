const axios = require('axios');
const { Variables } = require("camunda-external-task-client-js");

/**
 * ƒêƒÉng k√Ω worker ƒë·ªÉ g·ªçi service AI ra quy·∫øt ƒë·ªãnh kho·∫£n vay.
 * Worker n√†y s·∫Ω:
 * 1. L·∫•y d·ªØ li·ªáu kh√°ch h√†ng.
 * 2. Ki·ªÉm tra cache Redis tr∆∞·ªõc.
 * 3. N·∫øu kh√¥ng c√≥ cache, t·∫°o payload v√† g·ªçi API AI.
 * 4. X·ª≠ l√Ω ƒëi·ªÉm s·ªë tr·∫£ v·ªÅ, chuy·ªÉn th√†nh quy·∫øt ƒë·ªãnh (approve/review/decline).
 * 5. L∆∞u k·∫øt qu·∫£ v√†o cache v√† tr·∫£ v·ªÅ cho Camunda.
 * @param {object} client - Camunda External Task Client
 * @param {object} redisClient - Client Redis ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v√† k·∫øt n·ªëi
 */
function registerCalculateLoanResultsAIWorker(client, redisClient) {
    client.subscribe("calculateLoanResultsAI", async ({ task, taskService }) => {
        console.log(`ü§ñ Nh·∫≠n ƒë∆∞·ª£c t√°c v·ª• [calculateLoanResultsAI]...`);

        try {
            const customerData = task.variables.get("customerData");
            if (!customerData || !customerData.application_id) {
                throw new Error("Kh√¥ng t√¨m th·∫•y 'customerData' ho·∫∑c 'application_id' ƒë·ªÉ g·ª≠i cho AI.");
            }

            const cacheKey = `loan_results:${customerData.application_id}`;
            const cachedResults = await redisClient.get(cacheKey);

            if (cachedResults) {
                console.log("‚úÖ Cache HIT. S·ª≠ d·ª•ng k·∫øt qu·∫£ t·ª´ Redis.");
                const loanResults = JSON.parse(cachedResults);

                const processVariables = new Variables();
                processVariables.set("loan_results", loanResults);
                return await taskService.complete(task, processVariables);
            }

            console.log("... Cache MISS. G·ªçi ƒë·∫øn service AI th·∫≠t.");
            const apiPayload = {
                input: {
                    person_age: customerData.age,
                    person_income: customerData.income,
                    person_home_ownership: customerData.home_ownership,
                    person_emp_length: customerData.employment_length_years,
                    loan_intent: customerData.loan_intent,
                    loan_grade: customerData.loan_grade,
                    loan_amnt: customerData.loan_amount,
                    loan_int_rate: customerData.interest_rate,
                    loan_percent_income: customerData.percent_income,
                    cb_person_default_on_file: customerData.default_on_file,
                    cb_person_cred_hist_length: customerData.credit_history_length_years
                }
            };

            console.log("... Chu·∫©n b·ªã g·ªçi service AI v·ªõi payload:", JSON.stringify(apiPayload, null, 2));
            const aiServiceUrl = `${process.env.AWS_URL_SERVICE_AI}/loan-prediction/loan-pred-resources`;
            const response = await axios.post(aiServiceUrl, apiPayload);
            console.log("response",response.data)
            const aiResponse = response.data;

            if (!aiResponse || typeof aiResponse.score === 'undefined') {
                throw new Error("D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ AI kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c kh√¥ng ch·ª©a 'score'.");
            }

            const score = aiResponse.score;
            let decision = 'decline';

            if (score >= 0.8) {
                decision = 'approve';
            } else if (score >= 0.5) {
                decision = 'review';
            }


            console.log(`‚úÖ AI tr·∫£ v·ªÅ score: ${score}. Chuy·ªÉn ƒë·ªïi th√†nh decision: '${decision}'.`);

            // 4. L∆∞u k·∫øt qu·∫£ v√†o cache v√† ho√†n th√†nh t√°c v·ª•
            await redisClient.set(cacheKey, JSON.stringify(decision), {
                EX: 3600 // H·∫øt h·∫°n sau 1 gi·ªù
            });
            console.log(`...ƒë√£ l∆∞u k·∫øt qu·∫£ v√†o cache.`);

            const processVariables = new Variables();
            processVariables.set("loan_decision", decision);
            processVariables.set("loan_score", score);
            processVariables.set("customerData", customerData);

            await taskService.complete(task, processVariables);

        } catch (error) {
            console.error("‚ùå L·ªói trong worker [calculateLoanResultsAI]:", error.message);
            await taskService.handleFailure(task, {
                errorMessage: error.message,
                errorDetails: error.stack
            });
        }
    });
}

module.exports = registerCalculateLoanResultsAIWorker;