const { Pool } = require("pg");
const postgresConfig = require("../config").db;

console.log("üêò Kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn PostgreSQL...");

const pool = new Pool(postgresConfig);

pool.on("error", (err, client) => {
  console.error("L·ªói kh√¥ng mong mu·ªën tr√™n client PostgreSQL", err);
  process.exit(-1);
});

/**
 * L∆∞u th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω v√†o b·∫£ng recommendations.
 * @param {number} applicationId - ID c·ªßa ƒë∆°n vay.
 * @param {object} product_id - ƒê·ªëi t∆∞·ª£ng s·∫£n ph·∫©m ƒë∆∞·ª£c g·ª£i √Ω.
 * @returns {Promise<void>}
 */
/**
 * L∆∞u g·ª£i √Ω s·∫£n ph·∫©m v√†o c∆° s·ªü d·ªØ li·ªáu.
 * @param {number} applicationId - ID c·ªßa ƒë∆°n vay.
 * @param {object} productData - Object ch·ª©a th√¥ng tin s·∫£n ph·∫©m, v√≠ d·ª•: { product_id: 5, product: '...' }.
 */
async function saveRecommendation(applicationId, productData) {
  const productIdToSave = productData.product_id;

  if (productIdToSave === undefined) {
    console.error(
      "L·ªói: D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá, kh√¥ng t√¨m th·∫•y product_id.",
      productData
    );
    throw new Error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
  }

  const query = `
        INSERT INTO recommendations (application_id, product_id)
        VALUES ($1, $2);
    `;

  try {
    await pool.query(query, [applicationId, productIdToSave]);
    console.log(
      `‚úÖ ƒê√£ l∆∞u g·ª£i √Ω (S·∫£n ph·∫©m ID: ${productIdToSave}) cho ƒê∆°n vay ID: ${applicationId}`
    );
  } catch (error) {
    console.error("L·ªói khi l∆∞u g·ª£i √Ω s·∫£n ph·∫©m v√†o CSDL:", error);
    throw error;
  }
}
/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt ƒë∆°n vay.
 * @param {number} applicationId - ID c·ªßa ƒë∆°n vay c·∫ßn c·∫≠p nh·∫≠t.
 * @param {string} newStatus - Tr·∫°ng th√°i m·ªõi (ph·∫£i l√† m·ªôt trong c√°c gi√° tr·ªã c·ªßa ENUM application_status).
 * @returns {Promise<void>}
 */
async function updateApplicationStatus(applicationId, newStatus) {
  const query = `
        UPDATE loan_applications
        SET status = $1, updated_at = NOW()
        WHERE application_id = $2;
    `;
  try {
    await pool.query(query, [newStatus, applicationId]);
    console.log(
      `‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n vay ID ${applicationId} th√†nh: ${newStatus}`
    );
  } catch (error) {
    console.error(
      `L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i cho ƒë∆°n vay ID ${applicationId}:`,
      error
    );
  }
}

module.exports = {
  pool,
  saveRecommendation,
  updateApplicationStatus,
};
